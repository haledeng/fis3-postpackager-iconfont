{
  "name": "font-carrier",
  "version": "0.0.5",
  "description": "字体搬运工，中文字体解决方案，iconfont",
  "main": "./lib/index.js",
  "keywords": [
    "font",
    "webfont",
    "font-carrier"
  ],
  "author": {
    "name": "purplebamboo",
    "email": "xhzhuweikang@163.com"
  },
  "dependencies": {
    "jdataview": "^2.5.0",
    "lodash": "^3.7.0",
    "multiline": "^1.0.2",
    "opentype.js": "0.4.8",
    "svg2ttf": "^2.0.0",
    "svg_pathify": "0.0.x",
    "svgpath": "^2.0.0",
    "ttf2eot": "^1.3.0",
    "ttf2svg": "0.0.7",
    "ttf2woff": "^1.3.0",
    "xmldom": "^0.1.19"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/purplebamboo/font-carrier.git"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node ./test/index.js"
  },
  "engines": {
    "node": ">= 0.11.x"
  },
  "readme": "# font-carrier\n\n[![npm version](https://badge.fury.io/js/font-carrier.svg)](http://badge.fury.io/js/font-carrier) [![Build Status](https://travis-ci.org/purplebamboo/font-carrier.svg?branch=master)](https://travis-ci.org/purplebamboo/font-carrier)\n\nfont-carrier是一个功能强大的字体操作库，使用它你可以随心所欲的操作字体。\n\n一个字体font,包含若干字形glyph。比如我们浏览器里渲染`我`,浏览器就会去当前设置的font里面找到 `我`对应的字形glyph，使用它的形状来渲染。不同的字体的`我`的字形形状不一，所以才有差别。\n\nfont-carrier封装了简单的api,让你可以将某个svg,设置成一个字对应的字形。也可以通过解析已有字体，拿到某个字在这个字体下面对应的svg。让你通过svg的维度随意修改字体展现样式。\n\n我们不生产字体，我们只是字体的搬运工\n\n\n# features\n\n* 支持创建一个空白字体\n* 支持解析已有字体(ttf,svg)\n* 支持使用svg来设置字的展现\n* 支持解析svg的各种转换还有各种非path图形\n* 支持针对某一个字，导出对应的svg\n* 支持导出四种浏览器主流字体（ttf,eot,woff,svg）\n* 支持设置各种字体相关内容\n\n\n# getting start\n\n如果对iconfont还不是很了解的，请先参考这篇[文章](http://purplebamboo.github.io/2014/01/09/iconfont/)\n\n## install\n\n\n```\nnpm install font-carrier --save\n```\n\n\n## use\n\n### step-1.创建一个空白字体，或者解析一个已有的字体，这样都可以得到一个字体对象\n\n``` js\nvar fontCarrier = require('font-carrier')\n\n//创建空白字体对象\nvar font = fontCarrier.create()\n\n//从其他字体解析\nvar transFont = fontCarrier.transfer('./test/test.ttf')\n```\n\n### step-2.拿到字体对象后，你就可以使用svg随意操作字体了\n\n``` js\n//可以设置某个字对应的形状,当然unicode也是支持的\nfont.setSvg('我',fs.readFileSync('./test/svgs/circle.svg').toString())\n\n//也可以使用setGlyph可以设置更多信息\nfont.setGlyph('我',{\n  glyphName:'我',\n  horizAdvX:'1024',//设置这个字形的画布大小为1024\n  svg:fs.readFileSync('./test/svgs/circle.svg').toString()\n})\n\n//可以针对字直接拿到对应的svg\nvar svg = font.getSvg('我')\n\n//也可以先拿到对应的字形对象，再导出对应的svg\nvar glyph = transFont.getGlyph('我')\nglyph.toSvg()\n\n```\n\n### step-3.使用get,set各种操作完后，你可以选择导出字体\n\n``` js\n//默认会导出svg,ttf,eot,woff四种字体，\n//可以不传path,这样会默认返回一个包含四个字体buffer的对象\nfont.output({\n  path:'./iconfont'\n})\n\n```\n\n### step-4.导出字体后就可以在web中使用了\n\n``` html\n<style type=\"text/css\">\n  @font-face {font-family: 'iconfont';\n      src: url('iconfont.eot'); /* IE9*/\n      src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n      url('iconfont.woff') format('woff'), /* chrome、firefox */\n      url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n      url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */\n  }\n\n  .iconfont{font-family:\"iconfont\";font-size:16px;font-style:normal;}\n</style>\n\n<i class=\"iconfont\">我</i>\n//此时渲染出来的图形就是你设置的svg的样子\n\n```\n\n## example\n\n### 案例一\n\n使用svg设置一些icon\n\n```js\n//创建空白字体，使用svg生成字体\nvar font = fontCarrier.create()\nvar love = fs.readFileSync('./test/svgs/love.svg').toString()\nvar mail = fs.readFileSync('./test/svgs/mail.svg').toString()\n\n//使用汉字\nfont.setGlyph('爱',{\n  svg:love,\n  glyphName:'爱'\n})\n\n//使用unicode\nfont.setSvg('&#xe601;',mail)\n\nfont.output({\n  path:'./test'\n})\n\n```\n\n\n### 案例二\n\n从其他字体导出一些图标到自己的库里\n\n``` js\nvar transFont = fontCarrier.transfer('./test/test.ttf')\n\nvar gs = transFont.getGlyph('我是方正')\n//设置到上面案例一里的字体里面\nfont.setGlyph(gs)\n\n//这样font导出的字体里面就有了'我是方正'对应的svg形状了\nfont.output({\n  path:'./test'\n})\n\n\n```\n\n### 案例三\n\n对中文字体精简\n\n``` js\nvar transFont = fontCarrier.transfer('./test/test.ttf')\n//会自动根据当前的输入的文字过滤精简字体\ntransFont.min('我是精简后的字体，我可以重复')\ntransFont.output({\n  path:'./min'\n})\n\n```\n\n\n## api\n\n更多文档请看[这里](./doc/api.md)\n\n\n## test\n\n先确保安装依赖包 `npm install` 再运行`npm test`之后访问 `./test/index.html`\n\n\n# licence\n\nMIT\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/purplebamboo/font-carrier/issues"
  },
  "homepage": "https://github.com/purplebamboo/font-carrier",
  "_id": "font-carrier@0.0.5",
  "_from": "font-carrier@"
}
